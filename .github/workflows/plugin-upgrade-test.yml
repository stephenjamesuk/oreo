name: Upgrade Elementor test

on:
  push:
    branches:
      - 'main'
      - '3.[0-9][0-9]'
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/config.json'
      - 'bin/**'
      - '.gitignore'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Elementor version from WordPress svn'
        required: false
        default: ''

jobs:
  build-plugin:
    uses: ./.github/workflows/build.yml

  run-upgrade-test:
    name: Playwright plugin upgrade test
    runs-on: ubuntu-22.04
    needs: [build-plugin]
    if: ${{ github.event.pull_request.title == null || needs.build-plugin.outputs.changelog_diff }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-plugin.outputs.artifact_name }}
          path: ./build

      - name: Install WordPress environment
        run: |
          set -euo pipefail
          npm run setup-templates
          npx wp-lite-env start --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888

      - name: Wait for WordPress to be ready
        run: |
          set -euo pipefail
          for i in {1..60}; do
            if curl -sSf http://localhost:8888/wp-login.php >/dev/null; then
              echo "WP is up"
              exit 0
            fi
            sleep 2
          done
          exit 1

      - name: Prepare WP for theme operations
        run: |
          set -euo pipefail
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888 --command="bash -lc 'wp config get FS_METHOD >/dev/null 2>&1 || wp config set FS_METHOD direct --type=constant --raw'"
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888 --command="bash -lc 'chown -R www-data:www-data wp-content/themes 2>/dev/null || true; chmod -R u+rwX,go+rX wp-content/themes 2>/dev/null || true'"

      - name: Setup test data (install theme + base setup)
        run: |
          set -euo pipefail
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888 --command="bash -lc 'env WP_CLI_CACHE_DIR=/tmp/.wp-cli/cache wp theme is-installed hello-elementor || wp theme install hello-elementor --force; wp theme activate hello-elementor'"
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888 --command="bash -lc 'env WP_CLI_CACHE_DIR=/tmp/.wp-cli/cache wp plugin install elementor --activate || wp plugin activate elementor'"
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888 --command="bash -lc 'bash elementor-config/setup.sh'"

      - name: WordPress debug information
        run: |
          set -euo pipefail
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --command="wp core version" --port=8888
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --command="wp --info" --port=8888
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --command="wp plugin list" --port=8888
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --command="wp theme list" --port=8888

      - name: Install Playwright browser & deps
        run: |
          set -euo pipefail
          npx playwright install-deps
          npx playwright install chromium

      - name: Upgrade site (install built plugin ZIP + permalinks)
        run: |
          set -euo pipefail
          mkdir -p ./templates/playwright
          cd ./build && zip -r ../templates/playwright/elementor.zip . && cd ..
          ls -la ./templates/playwright/elementor.zip
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888 --command="bash -lc 'env WP_CLI_CACHE_DIR=/tmp/.wp-cli/cache wp plugin install ./templates/playwright/elementor.zip --force'"
          npx wp-lite-env cli --config=./tests/playwright/upgrade-test/.upgrade-test-wp-lite-env.json --port=8888 --command="bash -lc 'wp rewrite structure \"/%postname%/\" --hard && wp rewrite flush --hard'"

      - name: Run Playwright tests
        run: |
          set -euo pipefail
          npm run test:playwright:elements-regression -- --grep="Test heading template"

      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results-elements-regression
          path: test-results/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload Playwright HTML report (if generated)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: ignore
          retention-days: 7

  test-result:
    needs: run-upgrade-test
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    name: Playwright - Test Results
    steps:
      - name: Test status
        run: echo "Test status is - ${{ needs.run-upgrade-test.result }}"
      - name: Check Playwright job status
        if: ${{ needs.run-upgrade-test.result != 'success' && needs.run-upgrade-test.result != 'skipped' }}
        run: exit 1
